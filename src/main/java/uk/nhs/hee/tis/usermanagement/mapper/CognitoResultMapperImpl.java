package uk.nhs.hee.tis.usermanagement.mapper;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.springframework.stereotype.Component;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminCreateUserResponse;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AttributeType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthEventType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.EventContextDataType;
import software.amazon.awssdk.services.cognitoidentityprovider.model.UserType;
import uk.nhs.hee.tis.usermanagement.DTOs.AuthenticationUserDto;
import uk.nhs.hee.tis.usermanagement.DTOs.UserAuthEventDto;

/**
 * Implementation of mapping from cognito response to usermanagement objects, created as a quick way
 * to upgrade the aws sdk v1 -> v2 This class was modified from the source generated by Mapstruct
 *
 * @Generated{value = "org.mapstruct.ap.MappingProcessor", date = "2025-07-14T08:51:00+0100",
 *     comments = "version: 1.5.5.Final, compiler: javac, environment: Java 11.0.19 (Ubuntu)"}
 */
@Component
public class CognitoResultMapperImpl extends CognitoResultMapper {

  @Override
  public UserAuthEventDto toUserAuthEventDto(AuthEventType authEventTypes) {
    if (authEventTypes == null) {
      return null;
    }

    UserAuthEventDto.UserAuthEventDtoBuilder userAuthEventDto = UserAuthEventDto.builder();

    userAuthEventDto.event(authEventTypes.eventTypeAsString());
    if (authEventTypes.eventResponse() != null) {
      userAuthEventDto.result(authEventTypes.eventResponse().toString());
    }
    if (authEventTypes.creationDate() != null) {
      userAuthEventDto.eventDate(Date.from(authEventTypes.creationDate()));
    }
    userAuthEventDto.device(authEventTypesEventContextDataDeviceName(authEventTypes));
    userAuthEventDto.challenges(
        challengeResponsesToChallenges(authEventTypes.challengeResponses()));
    userAuthEventDto.eventId(authEventTypes.eventId());

    return userAuthEventDto.build();
  }

  @Override
  public List<UserAuthEventDto> toUserAuthEventDtos(List<AuthEventType> authEventTypes) {
    if (authEventTypes == null) {
      return null;
    }

    List<UserAuthEventDto> list = new ArrayList<UserAuthEventDto>(authEventTypes.size());
    for (AuthEventType authEventType : authEventTypes) {
      list.add(toUserAuthEventDto(authEventType));
    }

    return list;
  }

  @Override
  public AuthenticationUserDto toAuthenticationUser(AdminCreateUserResponse cognitoResult) {
    if (cognitoResult == null) {
      return null;
    }

    AuthenticationUserDto authenticationUserDto = new AuthenticationUserDto();

    List<AttributeType> attributes = cognitoResultUserAttributes(cognitoResult);
    authenticationUserDto.setAttributes(convertAttributes(attributes));
    Boolean enabled = cognitoResultUserEnabled(cognitoResult);
    if (enabled != null) {
      authenticationUserDto.setEnabled(enabled);
    }

    extractAttributes(authenticationUserDto);

    return authenticationUserDto;
  }

  @Override
  public AuthenticationUserDto toAuthenticationUser(UserType user) {
    if (user == null) {
      return null;
    }

    AuthenticationUserDto authenticationUserDto = new AuthenticationUserDto();

    authenticationUserDto.setUsername(user.username());
    if (user.enabled() != null) {
      authenticationUserDto.setEnabled(user.enabled());
    }
    authenticationUserDto.setAttributes(convertAttributes(user.attributes()));

    extractAttributes(authenticationUserDto);

    return authenticationUserDto;
  }

  private String authEventTypesEventContextDataDeviceName(AuthEventType authEventType) {
    if (authEventType == null) {
      return null;
    }
    EventContextDataType eventContextData = authEventType.eventContextData();
    if (eventContextData == null) {
      return null;
    }
    String deviceName = eventContextData.deviceName();
    if (deviceName == null) {
      return null;
    }
    return deviceName;
  }

  private List<AttributeType> cognitoResultUserAttributes(
      AdminCreateUserResponse adminCreateUserResult) {
    if (adminCreateUserResult == null) {
      return null;
    }
    UserType user = adminCreateUserResult.user();
    if (user == null) {
      return null;
    }
    List<AttributeType> attributes = user.attributes();
    if (attributes == null) {
      return null;
    }
    return attributes;
  }

  private Boolean cognitoResultUserEnabled(AdminCreateUserResponse adminCreateUserResult) {
    if (adminCreateUserResult == null) {
      return null;
    }
    UserType user = adminCreateUserResult.user();
    if (user == null) {
      return null;
    }
    Boolean enabled = user.enabled();
    if (enabled == null) {
      return null;
    }
    return enabled;
  }
}
